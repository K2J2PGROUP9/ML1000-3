library(shiny)
library(shinyBS)
library(leaflet)
library(dplyr)
library(tidyr)
library(caret)

# read data
locationsData <- read.csv("./www/AB_TOR_2019.csv", header = TRUE, sep=",")
# named vector of laction IDs
#locations <- setNames(unclass(locationsData$Location), c(levels(locationsData$Location)) )

# named vector of directions
directions = c("Entire home/apt"=1, "Hotel room"=2, "Private room"=3, "Shared room"=4)

# current station
#currStation = locationsData[1,]

# lod model: logRegModel
load("./www/logRegModel.Rdata");

# colors usd to highlight location: sunshine: fill, color. rain: fill, color
colors = c("#FFE700","#00b253","#b7dfe7","#A3BED6")

# UI code
ui <- bootstrapPage( theme = "styles.css",
                     div( class = "outer",
                          
                          # map in the background
                          leafletOutput("map", width="100%", height="100%"),
                          
                          absolutePanel( id = "controls", class = "control-panel", 
                                         
                                         h3("Airbnb rents in Toronto"),
                                         
                                         h4("Predict your airbnb rental rate!"),
                                         
                                         #6 Input: location value ----
                                         #selectInput('Location', 'Location', locations),
                                         #bsTooltip("Location", "Select one region from the list of available regions to predict rainfall for tomorrow",
                                         #          "right", options = list(container = "body")),
                                         
                                         
                                         #1 Input: Simple Humidity3pm ----
                                         sliderInput("latitude", "latitude :",
                                                     min = 43.58, max = 43.85,
                                                     value = 43.6, step = 0.01),

                                         
                                         #2 Input: Sunshine ----
                                         sliderInput("longitude", "longitude:",
                                                     min = -79.64, max = -79.1,
                                                     value = -79.53, step = 0.01),

                                         
                                         #3 Input: Cloud3pm ----
                                         sliderInput("number_of_reviews", "number of reviews:",
                                                     min = 0, max = 1000,
                                                     value = 100, step = 1),

                                         
                                         #4 Input: WindGustSpeed value ----
                                         sliderInput("availability_365", "availability in 365 days:",
                                                     min = 0, max = 365,
                                                     value = 30, step = 1),

                                         
                                         selectInput('room_type', 'room type', directions),
                                         bsTooltip("WindDir3pm", "Pick E - East, S - South, W - West, N -North or the combintation of the above",
                                                   "right", options = list(container = "body")),
                                         
                                         #5 Input: Rainfall value ----
                                         sliderInput("reviews_per_month", "reviews per month:",
                                                     min = 0, max = 100,
                                                     value = 2, step = 1),
                                         sliderInput("minimum_nights", "minimum nights:",
                                                     min = 0, max = 300,
                                                     value = 4, step = 1),
                                         
                                         #7 Input: Pressure3pm value ----
                                         sliderInput("calculated_host_listings_count", "host listings count:",
                                                     min = 0, max = 100,
                                                     value = 10, step = 1),

                          ),
                          
                          absolutePanel( class = "prediction-panel", 
                                         # Output: prediction
                                         h4("Your predicted rental rate is: "),
                                         textOutput("prediction")
                          )
                          
                     ))

# Server Code
server <- function(input, output) {
  
  # Reactive expression to create data frame of all input values ----
  inputData <- reactive({
    data.frame(
      name = c("latitude",  "longitude", "number_of_reviews", "availability_365", "reviews_per_month",
                "calculated_host_listings_count", "minimum_nights", "room_type"
      ),
      value = as.numeric(c(input$latitude, input$longitude, input$number_of_reviews,
                           input$availability_365, input$reviews_per_month,  input$minimum_nights,
                           input$calculated_host_listings_count, input$room_type ))
    )
  })
  
  
  output$prediction <- reactive({
    data <- spread(inputData(), name, value)
    #data$WindDir3pm = as.factor(data$WindDir3pm)
    #p <- paste0(round(predict(logRegModel, newdata =  data, type = "prob")[,"1"]*100, digits = 2),"%")
    pred_regression <- predict(second_model, newdata = data)
    pred_regression <- exp(pred_regression)
    p <- paste0(round(pred_regression),"$")
  })
  
  
  # draw a map
  output$map <- renderLeaflet({
    map = leaflet() %>% setView(lng = -79.38, lat = 43.65, zoom = 14 ) %>% addTiles() %>% 
      addCircleMarkers(data = locationsData, lng = ~longitude, lat = ~latitude, 
                       color = colors[2], fillColor = colors[1], radius = 1, 
                       layerId =paste0(locationsData$Location,locationsData$latitude,locationsData$longitude),
                       labelOptions = labelOptions(noHide = T, textOnly = F, className = "map-label"))
  })
  

  
}

# Create Shiny app ----
shinyApp(ui, server)
